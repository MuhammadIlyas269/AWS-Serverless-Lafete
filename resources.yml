# Book table
UserTable:
  Type: "AWS::DynamoDB::Table"
  Properties: 
    AttributeDefinitions: 
      - AttributeName: "Pk"
        AttributeType: "S"
      - AttributeName: "Sk"
        AttributeType: "S"
    BillingMode: "PAY_PER_REQUEST"
    KeySchema: 
      - AttributeName: Pk
        KeyType: "HASH"
      - AttributeName: Sk
        KeyType: "RANGE"
    Tags: 
      - Key: "Name"
        Value: "user-table"
    TableName: ${self:custom.settings.USERS_DYNAMODB_TABLE}
  
ServiceTable:
  Type: "AWS::DynamoDB::Table"
  Properties: 
    AttributeDefinitions: 
      - AttributeName: "Pk"
        AttributeType: "S"
      - AttributeName: "Sk"
        AttributeType: "S"
      - AttributeName: "city"
        AttributeType: "S"
    BillingMode: "PAY_PER_REQUEST"
    KeySchema: 
      - AttributeName: Pk
        KeyType: "HASH"
      - AttributeName: Sk
        KeyType: "RANGE"
    GlobalSecondaryIndexes:
      - IndexName: service-city-index
        KeySchema: 
          - AttributeName: Sk
            KeyType: "HASH"
          - AttributeName: city
            KeyType: "RANGE"
        Projection:
          NonKeyAttributes: [ ]
          ProjectionType: ALL
    Tags: 
      - Key: "Name"
        Value: "service-table"
    TableName: ${self:custom.settings.SERVICES_DYNAMODB_TABLE}

# User Pool configurations
cognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties: 
    UserPoolName: lafete-user-pool-${self:custom.stage} 
    UsernameAttributes:
      - email
    AutoVerifiedAttributes:
      - email
    UsernameConfiguration:
      CaseSensitive: False
    Policies:
      PasswordPolicy:
        MinimumLength: 8
        RequireLowercase: False
        RequireNumbers: True
        RequireSymbols: False
        RequireUppercase: False
    Schema: 
      - AttributeDataType: Boolean
        Mutable: True
        Name: is_profile_completed
        Required: False 


# User Pool client 
cognitoUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    ClientName: Web
    RefreshTokenValidity: 30
    IdTokenValidity: 1
    AccessTokenValidity: 1
    TokenValidityUnits:
      AccessToken: "days"
      IdToken: "days"
    UserPoolId: !Ref cognitoUserPool
    ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH

# User Groups 
cognitoUserGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties: 
    Description: All users other then service providers all are belong to this group
    GroupName: Users 
    Precedence: 1
    RoleArn: !GetAtt cognitoUserIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

cognitoUserIAMRole:
  Type: AWS::IAM::Role
  Properties: 
    AssumeRolePolicyDocument: 
      Version: "2012-10-17"
      Statement: 
        - Effect: "Allow"
          Principal:
            Federated: 
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRole"
    Description: "IAM role for lafete user"
    RoleName: "lafete-user-role"

GatewayResponseDefault4XX:
  Type: 'AWS::ApiGateway::GatewayResponse'
  Properties:
    ResponseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    ResponseType: DEFAULT_4XX
    RestApiId:
      Ref: 'ApiGatewayRestApi'

GatewayResponseDefault5XX:
  Type: 'AWS::ApiGateway::GatewayResponse'
  Properties:
    ResponseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    ResponseType: DEFAULT_5XX
    RestApiId:
      Ref: 'ApiGatewayRestApi'

UserApiGatewayAuthorizer:
  Type: AWS::ApiGateway::Authorizer
  Properties:
    Name: cognito-userPool-authorizer
    IdentitySource: method.request.header.Authorization
    Type: COGNITO_USER_POOLS
    ProviderARNs:
      - !GetAtt cognitoUserPool.Arn
    RestApiId:
      Ref: ApiGatewayRestApi
        